---
# Local package installation method
- block:  ## run_once: true
  - name: install | Stat local installation package
    stat:
     path: "{{ scale_install_localpkg_path }}"
    register: scale_install_localpkg

  - name: install | Check local installation package
    assert:
     that: scale_install_localpkg.stat.exists
     msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!

#

# Optionally, verify package checksum

#
  - name: install | Stat checksum file
    stat:
     path: "{{ scale_install_localpkg_path }}.md5"
    register: scale_install_md5_file

  - block:  ## when: scale_install_md5_file.stat.exists
    - name: install | Read checksum from file
      set_fact:
       scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

    - name: install | Compare checksums
      assert:
       that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.md5
       msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!

    when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost
#

# Copy installation package

#

- name: install | Stat extracted packages
  stat:
   path:  "{{ object_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- block:  ## when: not scale_install_gpfs_rpmdir.stat.exists
  - name: install | Stat temporary directory
    stat:
     path: "{{ scale_install_localpkg_tmpdir_path }}"
    register: scale_install_localpkg_tmpdir

  - name: install | Check temporary directory
    assert:
     that:
     - scale_install_localpkg_tmpdir.stat.exists
     - scale_install_localpkg_tmpdir.stat.isdir
     msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!

  - name: install | Copy installation package to node
    copy:
     src: "{{ scale_install_localpkg_path }}"
     dest: "{{ scale_install_localpkg_tmpdir_path }}"
     mode: a+x
  when: not scale_install_gpfs_rpmdir.stat.exists
#

# Extract installation package

#
- name: install | Extract installation package
  vars:
   localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
   creates:  "{{ object_extracted_path }}"

- name: install | Stat extracted packages
  stat:
   path:  "{{ object_extracted_path }}"
  register: scale_install_gpfs_rpmdir

- name: install | Check extracted packages
  assert:
   that:
   - scale_install_gpfs_rpmdir.stat.exists
   - scale_install_gpfs_rpmdir.stat.isdir
   msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!
#

# Delete installation package

#
- name: install | Delete installation package from node
  file:
   path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
   state: absent

- name: install | object path
  set_fact:
   object_url: 'object_rpms/rhel7/'
  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

- name: install | object path
  set_fact:
   object_url: 'object_rpms/rhel8/'
  when: ansible_distribution == 'RedHat' and ansible_distribution_major_version == '7'
#

# Find object rpms

#
- block:  ## when: host is defined as a protocol node

  - name: install | Find spectrum-scale-object RPMs
    find:
     paths:  "{{ object_extracted_path }}/{{ object_url }}"
     patterns: spectrum-scale-object*.rpm
    register: scale_install_gpfs_object
    #  - debug:
    #     msg: "{{ scale_install_gpfs_nfs }}"
  - name: install | Check valid spectrum-scale-object RPM
    assert:
     that: scale_install_gpfs_object.matched > 0
     msg: "No python RPM found {{ object_extracted_path }}/{{ object_url }}spectrum-scale-object*.rpm"

  - name: install | Add python RPMs to list
    vars:
     current_rpm:  "{{ object_extracted_path }}/{{ object_url }}{{ item.path| basename | regex_replace('\\.rpm$', '') }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_object.files }}"
 

- block:  ## when: host is defined as a protocol node

  - name: install | Find babel RPMs
    find:
     paths:  "{{ object_extracted_path }}/{{ object_url }}"
     patterns: babel*.rpm
    register: scale_install_gpfs_object
   
  - name: install | Check valid babel RPM
    assert:
     that: scale_install_gpfs_object.matched > 0
     msg: "No babel RPM found {{ object_extracted_path }}/{{ object_url }}babel*.rpm"

  - name: install | Add babel RPMs to list
    vars:
     current_rpm:  "{{ object_extracted_path }}/{{ object_url }}{{ item.path| basename | regex_replace('\\.rpm$', '') }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_object.files }}"
  when: false
- block:  ## when: host is defined as a protocol node

  - name: install | Find crudini RPMs
    find:
     paths:  "{{ object_extracted_path }}/{{ object_url }}"
     patterns: crudini*.rpm
    register: scale_install_gpfs_object

  - name: install | Check valid crudini RPM
    assert:
     that: scale_install_gpfs_object.matched > 0
     msg: "No crudini RPM found {{ object_extracted_path }}/{{ object_url }}crudini*.rpm"

  - name: install | Add crudini RPMs to list
    vars:
     current_rpm:  "{{ object_extracted_path }}/{{ object_url }}{{ item.path| basename | regex_replace('\\.rpm$', '') }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_object.files }}"
  when: false
- block:  ## when: host is defined as a protocol node

  - name: install | Find isa RPMs
    find:
     paths:  "{{ object_extracted_path }}/{{ object_url }}"
     patterns: isa*.rpm
    register: scale_install_gpfs_object

  - name: install | Check valid crudini RPM
    assert:
     that: scale_install_gpfs_object.matched > 0
     msg: "No isa RPM found {{ object_extracted_path }}/{{ object_url }}isa*.rpm"

  - name: install | Add isa RPMs to list
    vars:
     current_rpm:  "{{ object_extracted_path }}/{{ object_url }}{{ item.path| basename | regex_replace('\\.rpm$', '') }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_object.files }}"
  when: false
- block:  ## when: host is defined as a protocol node

  - name: install | Find isa RPMs
    find:
     paths:  "{{ object_extracted_path }}/{{ object_url }}"
     patterns: isa*.rpm
    register: scale_install_gpfs_object

  - name: install | Check valid crudini RPM
    assert:
     that: scale_install_gpfs_object.matched > 0
     msg: "No isa RPM found {{ object_extracted_path }}/{{ object_url }}isa*.rpm"

  - name: install | Add isa RPMs to list
    vars:
     current_rpm:  "{{ object_extracted_path }}/{{ object_url }}{{ item.path| basename | regex_replace('\\.rpm$', '') }}.rpm"
    set_fact:
     scale_install_all_rpms: "{{ scale_install_all_rpms + [ current_rpm ] }}"
    with_items:
    - "{{ scale_install_gpfs_object.files }}"
  when: false
